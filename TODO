LXC-tools TODO list
-------------------

* Ubuntu (ready), ArchLinux, Progress and Busybox templates
* Check if container exists (name, directory, etc)
* If none name passed, generated automatically (show in dialog "auto")
* Check directory name (check_name) using a regex
* Save LXC-container as a template (tar.gz)
* Export LXC container
* Add logging functionality for every run (container.0, container.1)
* Generate a random password for more "automatically" creation of container
* LVM creation functionality (ready)
* BTRFS creation functionality (ready)
* role for Debian hardening (install psad,shorewall,portsentry,fail2ban)
* various functional roles (ex: web server)
* crear un LXC a partir de una openvz template
* crear un LXC-container a partir de una vps openvz (backup)
* crear un LXC-application-container
* Crear rol para un application-container lxct-app (ej: bind-chroot)
* Working hooks.d directory
* Rename scripts in lib/ directory (for using lxct- prefix)
* Add debian/ folder for .deb version
* Split common functionality in different versions (https://github.com/phbaer/lxc-tools)
* Use TRAP (EXIT SIGHUP SIGINT SIGTERM) for cleanup some accidental failures.
* using qemu-debootstrap
    if [ -n "$(which qemu-debootstrap)" ]; then
        qemu-debootstrap --verbose --components=main,universe --arch=$arch --include=$packages $release $cache/partial-$arch $MIRROR
  for ARM-emulated containers.

    elif [ "$arch" = "armv7l" ]; then
        arch="armhf"
    fi
    
converting openvz template in a lxc container

tar xfz /centos-lxc-root.tgz --numeric-owner


# chkconfig --list|grep '3:on'
# chkconfig httpd off
# chkconfig saslauthd off
# rm /etc/mtab
# touch /etc/mtab

* create a revert operation with trap

revert()
{
    echo "Interrupted, so cleaning up"
    lxc-destroy -n $name
    # maybe was interrupted before copy config
    rm -rf $path
    rm -rf $default_path/$name
    echo "exiting..."
    exit 1
}

trap revert SIGHUP SIGINT SIGTERM
