#!/bin/bash
##
#  /usr/lib/lxc-tools/templates.d/lxc-gentoo
#
#  Build a gentoo container from stage3
##
#
# gentoo install
#
# based on:
# Walter Stanish https://github.com/globalcitizen/lxc-gentoo
# Authors:
# Jesus Lara <jesuslarag@phenobarbital.info>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

MIRROR="${MIRROR:-http://distfiles.gentoo.org}"
STAGE3_TARBALL=""
PORTAGE=""

#TODO: select sub-variant (hardened, nomultilib)

# download a stage3 gentoo tarball
download_gentoo()
{
	if [ "$MIRROR" == 'auto' ]; then
		MIRROR='http://distfiles.gentoo.org'
	fi

	if [ "$ARCH" == 'x86_64' ]; then
		arch='amd64'
	else
		arch='x86'
	fi
	WGET="wget --timeout=8 --read-timeout=15 -c -t10 -nd"

    mkdir -p "$CACHE/$DIST/partial-$arch"
    if [ $? -ne 0 ]; then
       	error "Failed to create '$CACHE/$DIST/partial-$arch' directory"
       	return 1
    fi
    # get stage3 URL
    stage3url="$MIRROR/releases/${arch}/autobuilds"
    stage3pathurl="$stage3url/latest-stage3-${arch}.txt"
    
    debug " - downloading and processing $stage3pathurl"
    RESULT=$($WGET -qO- $stage3pathurl | tail -1)
    if [ ! -z "$RESULT" ]; then
		stage3path=$RESULT
		# Download the actual stage3
		info "Downloading Gentoo stage3 tarball"
		stage3tarballurl="${stage3url}/${stage3path}"
		stage3tarball=$(basename ${stage3path})
	else
		error "Failed to download latest stage3 archive, aborting."
		rm -fR "$CACHE/$DIST/partial-$arch"
		exit 1
	fi
	if [ -f "$CACHE/$DIST/partial-$arch/$stage3tarball" ]; then
		# remove file
		rm -f "$CACHE/$DIST/partial-$arch/$stage3tarball"
	fi
    wget --directory-prefix="$CACHE/$DIST/partial-$arch" $stage3tarballurl
    RESULT=$?
    if [ "$RESULT" != "0" ]; then
       error "Failed to download the stage3 tarball from ${stage3tarballurl}, aborting."
       rm -fR "$CACHE/$DIST/partial-$arch"
       exit 1
    fi

    mv "$CACHE/$DIST/partial-$arch" "$CACHE/$DIST/rootfs-$arch"
    STAGE3_TARBALL="$CACHE/$DIST/rootfs-$arch/${stage3tarball}"
    info "Download $DIST Tarball $ARCH complete."

    return 0
}

download_portage()
{
	if [ "$MIRROR" == 'auto' ]; then
		MIRROR='http://distfiles.gentoo.org'
	fi
	portageurl="$MIRROR/snapshots/portage-latest.tar.bz2"
	portagedest="$CACHE/$DIST/portage-latest.tar.bz2"

	if [[ ! -f "$portagedest" ]]; then
		info "Downloading Gentoo portage (software build database) snapshot..."
		wget -O "$portagedest" "$portageurl"
		if [ "$?" != "0" ]; then
			error "Failed to download gentoo portage from ${portageurl}, aborting."
			rm -fR "$portagedest"
			return 1
		fi
	fi
	# used by calling function
	PORTAGE="$portagedest"
}

# copy gentoo cache to rootfs
copy_gentoo()
{
	if [ -f "$STAGE3_TARBALL" ]; then
		info "Copying gentoo stage3 tarball to $ROOTFS..."
		tar -xpf "$STAGE3_TARBALL" -C "$ROOTFS"
		if [ $? -ne 0 ]; then
			error "Failed to copy rootfs"
			exit 1
		fi
	fi
	return 0
}

# create container from gentoo cache
install_gentoo() 
{

    mkdir -p /var/lock/subsys/
    (
        flock -n -x 200
        if [ $? -ne 0 ]; then
            error "Cache repository is busy."
            exit 1
        fi
        
		if [ "$ARCH" == 'x86_64' ]; then
			arch='amd64'
		else
			arch='x86'
		fi
        # cleaning cache
        if [ "$CLEAN_CACHE" -eq "1" ]; then
			message "Cache found in $CACHE/$DIST/rootfs-$arch. clearing ..."
			rm -fR $CACHE/$DIST/rootfs-$arch
        fi
        # check if gentoo tarball or stage3 was not already downloaded
        cache_file=($CACHE/$DIST/rootfs-$arch/stage3-*.tar.bz2)
        message "Checking stage3 tarball download in $CACHE/$DIST/rootfs-$arch ... "
        if [ ! -f ${cache_file[0]} ]; then
            download_gentoo
            if [ $? -ne 0 ]; then
                error "Failed to download Gentoo Stage3"
                exit 1
            fi
        else
			# hay descargada una version
			STAGE3_TARBALL=${cache_file[0]}
        fi
        
        copy_gentoo
        
        return 0

        ) 200>/var/lock/subsys/lxc-gentoo

    return $?
}

setup_portage()
{
	# configure portage
	# making portage directories
	mkdir -p "$ROOTFS/etc/portage"
	mkdir -p "$ROOTFS/var/portage"
	mkdir -p "$ROOTFS/var/portage/tmp" && mkdir -p "$ROOTFS/var/portage/tree" && mkdir -p "$ROOTFS/var/portage/distfiles"
	mkdir -p "$ROOTFS/var/portage/logs" && mkdir -p "$ROOTFS/var/portage/packages"
	src="$ROOTFS/etc/portage/make.profile"
	dest=$(readlink "$src")
	dest="${dest##*../}"
	dest="${dest//usr\/portage/var/portage/tree}"
	dest="$ROOTFS/$dest"
	# relocate profile symlink
	ln -f -s "$dest" "$src" || return 1
cat <<- EOF >> "$ROOTFS/etc/portage/make.conf"
PORTAGE_TMPDIR="/var/portage/tmp"
PORTDIR="/var/portage/tree"
PORT_LOGDIR="/var/portage/logs"
PKGDIR="/var/portage/packages"
DISTDIR="/var/portage/distfiles"
# enable this to store built binary packages
FEATURES="\$FEATURES buildpkg"
FEATURES="\$FEATURES compress-build-logs"
FEATURES="\$FEATURES split-log"
FEATURES="\$FEATURES split-elog"

EOF
	download_portage
	if [ $? -ne 0 ]; then
		error "Failed to download portage software"
		exit 1
	fi
	# uncompress portage source
	if [ -f "$PORTAGE" ]; then
		tar -xp --strip-components 1 -C "$ROOTFS/var/portage/tree/" -f "$PORTAGE"
	fi
	return 0
}

## gentoo functions
# custom inittab
gentoo_inittab() {
	sed -i 's/^c[1-9]/#&/' ${ROOTFS}/etc/inittab # disable getty
	echo "# Lxc main console" >> ${ROOTFS}/etc/inittab
	# echo "1:12345:respawn:/sbin/agetty -a root 38400 console linux" >> ${ROOTFS}/${INITTAB}
	echo "1:12345:respawn:/sbin/agetty 115200 console linux" >> ${ROOTFS}/etc/inittab
	# we also blank out /etc/issue here in order to prevent delays spawning login
	# caused by attempts to determine domainname on disconnected containers
	rm ${ROOTFS}/etc/issue && touch ${ROOTFS}/etc/issue
	# we also disable the /etc/init.d/termencoding script which can cause errors
	sed -i 's/^(\s*keyword .*)$/$1 -lxc/' ${ROOTFS}/etc/init.d/termencoding
	# quiet login
	# touch ${ROOTFS}/root/.hushlogin
}

try_gentoo_inittab() {
cat <<EOF > $ROOTFS/etc/inittab
# Default runlevel.
id:3:initdefault:

# System initialization, mount local filesystems, etc.
si::sysinit:/sbin/rc sysinit

# Further system initialization, brings up the boot runlevel.
rc::bootwait:/sbin/rc boot

l0:0:wait:/sbin/rc shutdown
l0s:0:wait:/sbin/halt -dhp
l1:1:wait:/sbin/rc single
l2:2:wait:/sbin/rc nonetwork
l3:3:wait:/sbin/rc default
l4:4:wait:/sbin/rc default
l5:5:wait:/sbin/rc default
l6:6:wait:/sbin/rc reboot
l6r:6:wait:/sbin/reboot -dk
# Normally not reached, but fallthrough in case of emergency.
z6:6:respawn:/sbin/sulogin

# new-style single-user
su0:S:wait:/sbin/rc single
su1:S:wait:/sbin/sulogin

1:2345:respawn:/sbin/agetty 115200 console linux
c1:12345:respawn:/sbin/agetty 38400 tty1 linux
c2:12345:respawn:/sbin/agetty 38400 tty2 linux
# clean container shutdown on SIGPWR
pf:12345:powerwait:/sbin/halt
EOF

	# caused by attempts to determine domainname on disconnected containers
	rm "$ROOTFS/etc/issue" && touch "$ROOTFS/etc/issue"
	# we also disable the /etc/init.d/termencoding script which can cause errors
	sed -i 's/^(\s*keyword .*)$/$1 -lxc/' "$ROOTFS/etc/init.d/termencoding"
	# quiet login
	touch "$ROOTFS/root/.hushlogin"
}

gentoo_devices()
{
	DEV="$ROOTFS/dev"
	# newer stage3 include too many useless nodes, remove them
	rm -f ${DEV}/hda*
	rm -f ${DEV}/sda*
	rm -f ${DEV}/sdb*
	rm -f ${DEV}/sdc*
	rm -f ${DEV}/sdd*
	rm -f ${DEV}/tty*
	rm -f ${DEV}/core
	rm -f ${DEV}/mem
	rm -f ${DEV}/net
	rm -f ${DEV}/pts
	rm -f ${DEV}/shm
	rm -f ${DEV}/port
	rm -rf ${DEV}/input/
	
	mknod -m 666 ${DEV}/tty c 5 0
    for tty in $(seq 1 2); do
	if [ ! -e $DEV/tty$tty ]; then
	    mknod -m 666 ${DEV}/tty$tty c 4 $tty
	fi
    done
    mknod -m 600 ${DEV}/initctl p
	mkdir -m 755 ${DEV}/pts
	mkdir -m 1777 ${DEV}/shm
	mkdir -m 755 ${DEV}/net
	mknod -m 666 ${DEV}/net/tun	c 10 200
    rm -f ${DEV}/null
	mknod -m 666 ${DEV}/null c 1 3
	rm -f ${DEV}/zero
    mknod -m 666 ${DEV}/zero c 1 5
    rm -f ${DEV}/random
    mknod -m 666 ${DEV}/random c 1 8
    rm -f ${DEV}/urandom
    mknod -m 666 ${DEV}/urandom c 1 9
    rm -f ${DEV}/console
    mknod -m 600 ${DEV}/console c 5 1
    rm -f ${DEV}/full
    mknod -m 666 ${DEV}/full c 1 7
    # Mount pseudo-filesystems
    mount -o bind /dev/pts "$ROOTFS/dev/pts"
    mount -o bind /proc "$ROOTFS/proc"
    mount -o bind /sys "$ROOTFS/sys"
    # configure a minimal fstab for container
cat <<EOF > $ROOTFS/etc/fstab
/dev/root               /                       rootfs   defaults        0 0
devpts                  /dev/pts                devpts  gid=5,mode=620,newinstance,ptmxmode=0666  0 0
tmpfs                   /dev/shm                tmpfs    nosuid,nodev    0 0
EOF
   
}

gentoo_network()
{

if [ "$DHCP" = "y" ]; then

cat <<EOF >> $ROOTFS/etc/conf.d/net
config_$LAN_INTERFACE="dhcp"
dns_domain_lo="$DOMAIN"
EOF

cat <<EOF >> $ROOTFS/etc/hosts
# $HOSTNAME
127.0.1.1 $HOSTNAME $NAME
EOF

else

cat <<EOF >> $ROOTFS/etc/conf.d/net
# interface $LAN_INTERFACE
config_$LAN_INTERFACE="$IP netmask $NETMASK brd $BROADCAST"
routes_$LAN_INTERFACE="default via $GATEWAY"
EOF
cat <<EOF >> $ROOTFS/etc/hosts
# $HOSTNAME
$IP	$HOSTNAME $NAME
EOF
fi
# set interface start on boot
if [ ! -f "$ROOTFS/etc/init.d/net.eth0" ]; then
	ln -s $ROOTFS/etc/init.d/net.lo $ROOTFS/etc/init.d/net.eth0
	ln -s $ROOTFS/etc/init.d/net.eth0 $ROOTFS/etc/runlevels/default/net.eth0
fi
chroot $ROOTFS /sbin/rc-update add net.eth0 default

# set the hostname
echo $NAME > $ROOTFS/etc/hostname
echo $HOSTNAME > $ROOTFS/etc/mailname
printf "HOSTNAME=%s\n" "$NAME" > $ROOTFS/etc/conf.d/hostname
}

# configure basic options of gentoo container
configure_gentoo()
{
	setup_portage
	if [ $? -ne 0 ]; then
		error "Failed to configure portage software"
		exit 1
	fi
	gentoo_inittab
	gentoo_devices
	# configure network
	gentoo_network
	# running basic gentoo hooks
	HOOKS="$TEMPLATEDIR/gentoo.d"
	for f in $(find $HOOKS/* -maxdepth 1 -type f | sort --numeric-sort); do
		. $f
	done	
	return 0
}

cleanup_gentoo()
{
    # Unmount pseudo-filesystems
    umount "$ROOTFS/dev/pts"
    umount "$ROOTFS/proc"
    umount "$ROOTFS/sys"	
	return 0
}

create_container()
{
	info "= Creating a Gentoo-Based Stage3 LXC container ="
	# create cache and download gentoo stage3
	install_gentoo
    if [ $? -ne 0 ]; then
        error "Failed to install Gentoo Stage3 in container"
		exit 1
    fi	
	debug "= Configure Gentoo-Based LXC container ="
	# configure chroot
	configure_gentoo
	info "Gentoo LXC Container created"
	return 0
}

cleanup_container()
{
	# cleanup
	cleanup_gentoo
	return 0
}
