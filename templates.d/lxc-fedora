#!/bin/bash
##
#  /usr/lib/lxc-tools/templates.d/lxc-canaima
#
#  Build container of centos 6.x in Debian 7 using yum+rpm
##
#
# centos 6.x lxc container install
#
# based on:
# Daniel Lezcano <daniel.lezcano@free.fr>
# Ramez Hanna <rhanna@informatiq.org>
#
# Authors:
# Jesus Lara <jesuslarag@phenobarbital.info>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

# re-define options
DIST='fedora'
SUITE='18'
RELEASE_FILE=''
MIRROR_URL=''

#TODO: usable inittab

download_fedora()
{
	INSTALL_ROOT="$CACHE/$DIST/$SUITE/partial-$ARCH"
	echo $INSTALL_ROOT
	
	WGET="wget --timeout=8 --read-timeout=15 -c -t10 -nd"
	YUM="yum --disablerepo=updates --installroot=$INSTALL_ROOT -y --nogpgcheck"
	YUM_CACHE=$INSTALL_ROOT/var/cache/yum/base/packages
    RPM="rpm --root $INSTALL_ROOT --ignorearch"
    
    # create partial directory
	mkdir -p $INSTALL_ROOT
    if [ $? -ne 0 ]; then
		error "Failed to create '$INSTALL_ROOT' directory"
       	return 1
    fi
    
    # create directories for yum
	mkdir -p $INSTALL_ROOT/var/{lib/rpm,cache/yum/base/packages}
	mkdir -p $INSTALL_ROOT/var/cache/yum/$ARCH/$SUITE/base/packages
	
	if [ "$ARCH" = "i686" ]; then
		ARCH='i386'
	fi
	
    # download centos mirror list
    info "Downloading Fedora mirror list ..."
	MIRRORLIST_URL="http://mirrors.fedoraproject.org/mirrorlist?repo=$DIST-$SUITE&arch=$ARCH"
    
    # download centos-release.rpm
	DOWNLOAD_OK=no
    for trynumber in 1 2 3; do
        [ $trynumber != 1 ] && echo "Trying again..."
        MIRROR_URL=$($WGET -qO- $MIRRORLIST_URL | head -2 | tail -n 1)
        debug $MIRROR_URL
        # MIRROR_URL=$(curl -s -S -f "$MIRRORLIST_URL" | head -n1 | tail -n1)
        if [ $? -ne 0 ] || [ -z "$MIRROR_URL" ]; then
            echo "Failed to get a mirror"
            continue
        fi
        if [ "$SUITE" -gt "16" ]; then
            RELEASE_URL="${MIRROR_URL}/Packages/f/fedora-release-$SUITE-1.noarch.rpm"
        else
            RELEASE_URL="${MIRROR_URL}/Packages/fedora-release-$SUITE-1.noarch.rpm"
        fi
          
        message "Fetching from: $RELEASE_URL"
        wget -N --directory-prefix="$INSTALL_ROOT" $RELEASE_URL
        if [ $? -ne 0 ]; then
            echo "Failed to download Fedora $SUITE release rpm"
            continue
        fi
        DOWNLOAD_OK=yes
        RELEASE_FILE=$(basename $RELEASE_URL)
        break
    done
    
    if [ $DOWNLOAD_OK != yes ]; then
        return 1
    fi
    
    # bug in python-urlgrabber, disable SSL verification
    info " - disable ssl verify in yum.conf"
    if [ -z `grep -q 'sslverify' /etc/yum/yum.conf` ]; then
		echo "sslverify=0" >> /etc/yum/yum.conf
	fi
    
    # make yum cache
    $YUM makecache
	info "Yum cache metadata created"
	
	# install fedora-release
    $RPM --nodeps -ivh "${INSTALL_ROOT}/${RELEASE_FILE}"
    
	# download and install base system    
    debug " - installing bash"
    $YUM install bash basesystem filesystem
    if [ $? -ne 0 ]; then    
		error "Cannot install Fedora Base system"
		return 1
    fi   
    # Mount /dev and /sys (required for yum)
    mkdir $INSTALL_ROOT/dev/ -p
    mount -o bind /dev $INSTALL_ROOT/dev/
    
    mkdir $INSTALL_ROOT/sys/ -p
    mount -o bind /sys $INSTALL_ROOT/sys/  
        
    debug " - installing yum and rpm"
	$YUM install rpm-build yum   
    if [ $? -ne 0 ]; then
		umount -f $INSTALL_ROOT/dev/
		umount -f $INSTALL_ROOT/sys/    
		error "error installing yum, aborted"
		return 1
    fi
    # rebuild rpm db
	chroot $INSTALL_ROOT rpm --rebuilddb

    PKG_LIST="initscripts passwd rsyslog vim-minimal less dhclient rootfiles policycoreutils fedora-release python rpm rpm-python openssh-server chkconfig passwd vixie-cron wget which libxml2 gnupg2 glib2 gpgme libxml2-python pygpgme python-pycurl PyXML openssh-clients openssl curl"
    # $YUM install $PKG_LIST
    
    # create a dummy resolvconf
    cp /etc/resolv.conf $INSTALL_ROOT/etc/resolv.conf
    
    # instalar desde dentro de la chroot, garantiza su instalacion
    # cp $INSTALL_ROOT/var/cache/yum/base/packages/* $INSTALL_ROOT/var/cache/yum/$ARCH/$SUITE/base/packages/
    debug "- Install all packages in chroot environment"
    chroot $INSTALL_ROOT /bin/rpm -ivh /fedora-release-*.rpm
    # install everything
    chroot $INSTALL_ROOT /usr/bin/yum -y --disablerepo=updates --nogpgcheck install rpm yum
    chroot $INSTALL_ROOT /usr/bin/yum -y --disablerepo=updates --nogpgcheck install $PKG_LIST
    if [ $? -ne 0 ]; then
		umount -f $INSTALL_ROOT/dev/
		umount -f $INSTALL_ROOT/sys/
		echo "Failed to download the rootfs, aborting."
		return 1
    fi
    
    # clean cache
    info "Cleaning Cache installation"
    chroot $ROOTFS /usr/bin/yum clean all
    
    # umount dev
    umount -f $INSTALL_ROOT/dev/
	umount -f $INSTALL_ROOT/sys/
	
	mv "$INSTALL_ROOT" "$CACHE/$DIST/$SUITE/rootfs-$ARCH"
    info "Download $DIST $SUITE complete."
 
    return 0    
}

# make a local copy of the mini centos
copy_fedora()
{
    info "Copying Fedora rootfs to $ROOTFS..."
    rsync -aqzpHSW $CACHE/$DIST/$SUITE/rootfs-$ARCH/* $ROOTFS/ || return 1
    if [ $? -ne 0 ]; then
		error "Failed to copy rootfs"
        exit 1
    fi
    return 0
}

# install centos cache in rootfs
install_fedora()
{
    mkdir -p /var/lock/subsys/
    (
        flock -n -x 200
        if [ $? -ne 0 ]; then
            error "Cache repository is busy."
            exit 1
        fi
        
        # cleaning cache of mini centos
        if [ "$CLEAN_CACHE" -eq "1" ]; then
			message "Cache found in $CACHE/$DIST/$SUITE/rootfs-$ARCH. clearing ..."
			rm --preserve-root --one-file-system -fR $CACHE/$DIST/$SUITE/rootfs-$ARCH && echo "Done." || exit 1
        fi

        message "Checking cache download in $CACHE/$DIST/$SUITE/rootfs-$ARCH ... "
        if [ ! -e "$CACHE/$DIST/$SUITE/rootfs-$ARCH" ]; then
            download_fedora
            if [ $? -ne 0 ]; then
                error "Failed to download 'Fedora Base'"
                exit 1
            fi
        fi

        copy_fedora
        
        return 0

        ) 200>/var/lock/subsys/lxc

    return $?
}

fedora_network()
{
	if [ "$DHCP" = "y" ]; then
		# configure using DHCP
cat <<EOF > $ROOTFS/etc/sysconfig/network-scripts/ifcfg-$LAN_INTERFACE
DEVICE=$LAN_INTERFACE
BOOTPROTO=dhcp
ONBOOT=yes
NM_CONTROLLED=no
USERCTL=yes
PEERDNS=yes
IPV6INIT=no
TYPE=Ethernet
MTU=$MTU
EOF
cat <<EOF >> $ROOTFS/etc/hosts
# $HOSTNAME
127.0.1.1	$HOSTNAME $NAME
EOF
	else
cat <<EOF > $ROOTFS/etc/sysconfig/network-scripts/ifcfg-$LAN_INTERFACE
DEVICE=$LAN_INTERFACE
NETWORK=$NETWORK
NETMASK=$NETMASK
IPADDR=$IP
GATEWAY=$GATEWAY
BOOTPROTO=none
ONBOOT=yes
NM_CONTROLLED=no
USERCTL=yes
PEERDNS=yes
IPV6INIT=no
TYPE=Ethernet
MTU=$MTU
EOF
cat <<EOF >> $ROOTFS/etc/hosts
# $HOSTNAME
$IP	$HOSTNAME $NAME
EOF
	fi
# set the hostname
cat <<EOF > $ROOTFS/etc/sysconfig/network
NETWORKING=yes
NETWORKING_IPV6=no
HOSTNAME=$HOSTNAME
EOF
echo $NAME > $ROOTFS/etc/hostname
echo $HOSTNAME > $ROOTFS/etc/mailname
}

fedora_devices()
{
	DEV="$ROOTFS/dev"
    for tty in $(seq 1 4); do
	if [ ! -e $DEV/tty$tty ]; then
	    mknod -m 666 $ROOTFS/dev/tty$tty c 4 $tty
	fi
    done	
    mknod -m 666 $DEV/zero c 1 5
    mknod -m 666 $DEV/random c 1 8
    mknod -m 666 $DEV/urandom c 1 9
    rm -f ${DEV}/pts
    mkdir -m 755 $DEV/pts
    rm -f ${DEV}/shm
    mkdir -m 1777 $DEV/shm
    mknod -m 600 $DEV/console c 5 1
    mknod -m 666 $DEV/full c 1 7
    mknod -m 600 $DEV/initctl p
    # Mount pseudo-filesystems
    mount -o bind /dev/pts "$ROOTFS/dev/pts"
    mount -o bind /proc "$ROOTFS/proc"
    mount -o bind /sys "$ROOTFS/sys" 
# configure a minimal fstab
cat <<EOF > $ROOTFS/etc/fstab
/dev/root               /                       rootfs   defaults        0 0
devpts                  /dev/pts                devpts  gid=5,mode=620,newinstance,ptmxmode=0666  0 0
none                    /dev/shm                tmpfs    nosuid,nodev    0 0
EOF
}

fedora_inittab() {
cat <<EOF > $ROOTFS/etc/inittab
id:3:initdefault:
si::sysinit:/etc/init.d/rcS
l0:0:wait:/etc/init.d/rc 0
l1:1:wait:/etc/init.d/rc 1
l2:2:wait:/etc/init.d/rc 2
l3:3:wait:/etc/init.d/rc 3
l4:4:wait:/etc/init.d/rc 4
l5:5:wait:/etc/init.d/rc 5
l6:6:wait:/etc/init.d/rc 6
# Normally not reached, but fallthrough in case of emergency.
z6:6:respawn:/sbin/sulogin
1:2345:respawn:/sbin/getty 38400 console
c1:12345:respawn:/sbin/getty 38400 tty1 linux
c2:12345:respawn:/sbin/getty 38400 tty2 linux
c3:12345:respawn:/sbin/getty 38400 tty3 linux
c4:12345:respawn:/sbin/getty 38400 tty4 linux
EOF
}

configure_fedora()
{
	# configure via mknod devices
	fedora_devices
	# configure debian network
	fedora_network
	# inittab
	fedora_inittab
	# running basic fedora hooks
	FEDORA="$TEMPLATEDIR/fedora.d"
	for f in $(find $FEDORA/* -maxdepth 1 -type f | sort --numeric-sort); do
		. $f
	done
}

cleanup_fedora()
{
	#
	# yum clean cache
	#
	chroot $ROOTFS /usr/bin/yum clean all
    # Unmount pseudo-filesystems
    umount -f $ROOTFS/dev/pts
    umount -f $ROOTFS/proc
    umount -f $ROOTFS/sys	
}

create_container()
{
	info "= Creating a Fedora-Based LXC container ="
	# create cache and install fedora
	install_fedora
    if [ $? -ne 0 ]; then
       error "Failed to install a 'Fedora $SUITE' container"
       exit 1
    fi	
	# configure chroot
	configure_fedora
    if [ $? -ne 0 ]; then
       error "Failed to configure Fedora container"
       exit 1
    fi
}


cleanup_container()
{
	# fedora cleanup
	cleanup_fedora
	info "Fedora LXC Container created"
	return 0
}
