#!/bin/bash
##
#  /usr/lib/lxc-tools/templates.d/lxc-centosd
#
#  Build container of centos 6.x in Debian 7 using yum+rpm
##
#
# centos 6.x lxc container install
#
# based on:
# Daniel Lezcano <daniel.lezcano@free.fr>
# Ramez Hanna <rhanna@informatiq.org>
# Authors:
# Jesus Lara <jesuslarag@phenobarbital.info>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

# re-define options
DIST='centos'
RELEASE='6'
VERSION='6-4.el6.centos.10'


download_centos()
{
	INSTALL_ROOT="$CACHE/$DIST/$RELEASE/partial-$ARCHITECTURE"
	mkdir -p $INSTALL_ROOT
    if [ $? -ne 0 ]; then
		error "Failed to create '$INSTALL_ROOT' directory"
       	return 1
    fi
    
    # create directories for yum
	mkdir -p $INSTALL_ROOT/var/{lib/rpm,cache/yum/base/packages}
	
	# and update a yum.conf
	echo "protected_multilib=1" >> /etc/yum/yum.conf
	if [ "$ARCHITECTURE" = "x86_64" ]; then
		# resolve a Â¿bug? yum try to install i386 versions of packages
		echo "exclude=*.i386 *.i686" >> /etc/yum/yum.conf
	fi
	
    # download a mini centos into a cache
    message "Downloading centos release file ..."

    YUM="yum --disablerepo=updates --enablerepo=base --exclude=*.i386,*.i686 --installroot=$INSTALL_ROOT -y --nogpgcheck"
    RPM="rpm --root $INSTALL_ROOT --ignorearch -ivh"
    MIRRORLIST_URL="http://mirrorlist.centos.org/?release=6&arch=x86_64&repo=os"
    
    PKG_BASE="bash basesystem setup rootfiles MAKEDEV initscripts"
    PKG_LIST="python rpm rpm-python libxml2 gnupg2 glib2 gpgme libxml2-python pygpgme python-pycurl PyXML wget passwd rsyslog vim-minimal dhclient chkconfig policycoreutils openssh-clients openssl curl"
    
    
    # download centos-release.rpm
	DOWNLOAD_OK=no
    for trynumber in 1 2 3; do
        [ $trynumber != 1 ] && echo "Trying again..."
        MIRROR_URL=$(curl -s -S -f "$MIRRORLIST_URL" | head -n1 | tail -n1)
        if [ $? -ne 0 ] || [ -z "$MIRROR_URL" ]; then
            echo "Failed to get a mirror"
            continue
        fi
        RELEASE_URL="$MIRROR_URL/Packages/centos-release-$VERSION.$ARCHITECTURE.rpm"
        echo "Fetching from: $RELEASE_URL"
        curl -f "$RELEASE_URL" > $INSTALL_ROOT/centos-release-$VERSION.$ARCHITECTURE.rpm
        if [ $? -ne 0 ]; then
            echo "Failed to download centos release rpm"
            continue
        fi
        DOWNLOAD_OK=yes
        break
    done
    
    if [ $DOWNLOAD_OK != yes ]; then
        echo "Aborting"
        return 1
    fi

    $RPM  --initdb
    # install centos-release
    $RPM $INSTALL_ROOT/centos-release-$VERSION.$ARCHITECTURE.rpm
    # install base system
    # esto no instala, pero descarga los paquetes en la cache local
    $YUM makecache
	# TODO: que se pueda solo descargar a la cache:
	$YUM install $PKG_BASE
    
    YUM_CACHE=$INSTALL_ROOT/var/cache/yum/base/packages
    
    $RPM --force --nodeps $YUM_CACHE/setup-*.noarch.rpm $YUM_CACHE/basesystem-*.noarch.rpm $YUM_CACHE/ca-certificates-*.noarch.rpm \
    $YUM_CACHE/tzdata-*.noarch.rpm $YUM_CACHE/rootfiles-*.noarch.rpm $YUM_CACHE/filesystem-*.rpm \
    $YUM_CACHE/hwdata-*.noarch.rpm
    
    # install all base packages
    $YUM install $PKG_BASE
    
    # install centos and yum dependencies
	$YUM install $PKG_LIST
    
    # try to install yum (download to cache)
    $YUM install yum

    # Mount /dev (required for yum)
    mount -o bind /dev "$INSTALL_ROOT/dev/"
    
    # create a resolvconf
    echo "nameserver 8.8.8.8" > $INSTALL_ROOT/etc/resolv.conf
    
    # make chroot
    chroot $INSTALL_ROOT rpm --nodeps -ivh /var/cache/yum/base/packages/yum-*.rpm /var/cache/yum/base/packages/python-urlgrabber-*.rpm /var/cache/yum/base/packages/python-iniparse-*.rpm
    
    chroot $INSTALL_ROOT rpm -ivh /centos-release-*.rpm
    
    chroot $INSTALL_ROOT rpm --rebuilddb
    
    # instalar desde dentro de la chroot, garantiza su instalacion
    chroot $INSTALL_ROOT yum --disablerepo=updates install rpm yum $PKG_BASE $PKG_LIST
    if [ $? -ne 0 ]; then
		echo "Failed to download the rootfs, aborting."
		return 1
    fi
        
    # clean cache
    chroot $ROOTFS yum clean all
    chroot $INSTALL_ROOT rm -f /var/lib/rpm/__*
    
    # Unmount dev
    umount "$INSTALL_ROOT/dev"

	mv "$INSTALL_ROOT" "$CACHE/$DIST/$RELEASE/rootfs-$ARCHITECTURE"
    info "\nDownload $DIST $RELEASE complete.\n"
 
    return 0    
}

# make a local copy of the mini centos
copy_centos()
{
    info "Copying rootfs to $ROOTFS..."
    cp -apr $CACHE/$DIST/$RELEASE/rootfs-$ARCHITECTURE/* $ROOTFS/ || return 1
    if [ $? -ne 0 ]; then
		error "Failed to copy rootfs"
        exit 1
    fi
    return 0
}

# install centos cache in rootfs
install_centos()
{
    mkdir -p /var/lock/subsys/
    (
        flock -n -x 200
        if [ $? -ne 0 ]; then
            error "Cache repository is busy."
            exit 1
        fi
        
        # cleaning cache of mini centos
        if [ "$CLEAN_CACHE" -eq "1" ]; then
			message "Cache found in $CACHE/$DIST/$RELEASE/rootfs-$ARCHITECTURE. clearing ..."
			rm --preserve-root --one-file-system -fR $CACHE/$DIST/$RELEASE/rootfs-$ARCHITECTURE && echo "Done." || exit 1
        fi
        
        # check the mini debian was not already downloaded
        message "Checking cache download in $CACHE/$DIST/$RELEASE/rootfs-$ARCHITECTURE ... "
        if [ ! -e "$CACHE/$DIST/$RELEASE/rootfs-$ARCHITECTURE" ]; then
            download_centos
            if [ $? -ne 0 ]; then
                error "Failed to download 'CentOS Base'"
                exit 1
            fi
        fi

        copy_centos
        
        return 0

        ) 200>/var/lock/subsys/lxc

    return $?
}

centos_network()
{
	if [ "$DHCP" = "y" ]; then
		# configure using DHCP
cat <<EOF > $ROOTFS/etc/sysconfig/network-scripts/ifcfg-$LAN_INTERFACE
DEVICE=$LAN_INTERFACE
BOOTPROTO=dhcp
ONBOOT=yes
NM_CONTROLLED=no
USERCTL=yes
PEERDNS=yes
IPV6INIT=no
TYPE=Ethernet
MTU=$MTU
EOF
cat <<EOF >> $ROOTFS/etc/hosts
# $HOSTNAME
127.0.1.1	$HOSTNAME $NAME
EOF
	else
cat <<EOF > $ROOTFS/etc/sysconfig/network-scripts/ifcfg-$LAN_INTERFACE
DEVICE=$LAN_INTERFACE
NETWORK=$NETWORK
NETMASK=$NETMASK
IPADDR=$IP
GATEWAY=$GATEWAY
BOOTPROTO=none
ONBOOT=yes
NM_CONTROLLED=no
USERCTL=yes
PEERDNS=yes
IPV6INIT=no
TYPE=Ethernet
MTU=$MTU
EOF
cat <<EOF >> $ROOTFS/etc/hosts
# $HOSTNAME
$IP	$HOSTNAME $NAME
EOF
	fi
# set the hostname
cat <<EOF > $ROOTFS/etc/sysconfig/network
NETWORKING=yes
NETWORKING_IPV6=no
HOSTNAME=$HOSTNAME
EOF
echo $NAME > $ROOTFS/etc/hostname
echo $HOSTNAME > $ROOTFS/etc/mailname
}

centos_devices()
{
	DEV="$ROOTFS/dev"
    for tty in $(seq 1 4); do
	if [ ! -e $DEV/tty$tty ]; then
	    mknod -m 666 $ROOTFS/dev/tty$tty c 4 $tty
	fi
    done	
    mknod -m 666 $DEV/zero c 1 5
    mknod -m 666 $DEV/random c 1 8
    mknod -m 666 $DEV/urandom c 1 9
    mkdir -m 755 $DEV/pts
    mkdir -m 1777 $DEV/shm
    mknod -m 600 $DEV/console c 5 1
    mknod -m 666 $DEV/full c 1 7
    mknod -m 600 $DEV/initctl p
    # Mount pseudo-filesystems
    mount -o bind /dev/pts "$ROOTFS/dev/pts"
    mount -o bind /proc "$ROOTFS/proc"
    mount -o bind /sys "$ROOTFS/sys"    
# configure a minimal fstab
cat <<EOF > $ROOTFS/etc/fstab
/dev/root               /                       rootfs   defaults        0 0
devpts                  /dev/pts                devpts  gid=5,mode=620,newinstance,ptmxmode=0666  0 0
none                    /dev/shm                tmpfs    nosuid,nodev    0 0
EOF
}

centos_inittab() {
cat <<EOF > $ROOTFS/etc/inittab
id:3:initdefault:
si::sysinit:/etc/init.d/rcS
l0:0:wait:/etc/init.d/rc 0
l1:1:wait:/etc/init.d/rc 1
l2:2:wait:/etc/init.d/rc 2
l3:3:wait:/etc/init.d/rc 3
l4:4:wait:/etc/init.d/rc 4
l5:5:wait:/etc/init.d/rc 5
l6:6:wait:/etc/init.d/rc 6
# Normally not reached, but fallthrough in case of emergency.
z6:6:respawn:/sbin/sulogin
1:2345:respawn:/sbin/getty 38400 console
c1:12345:respawn:/sbin/getty 38400 tty1 linux
c2:12345:respawn:/sbin/getty 38400 tty2 linux
c3:12345:respawn:/sbin/getty 38400 tty3 linux
c4:12345:respawn:/sbin/getty 38400 tty4 linux
EOF
}

configure_centos()
{
	# configure via mknod devices
	centos_devices
	# configure debian network
	centos_network
	# inittab
	centos_inittab
	# running basic centos hooks
	CENTOS="$TEMPLATEDIR/centos.d"
	for f in $(find $CENTOS/* -maxdepth 1 -type f | sort --numeric-sort); do
		. $f
	done
}

centos_cleanup()
{
	#
	# yum clean cache
	#
	chroot $ROOTFS /usr/bin/yum clean all
    # Unmount pseudo-filesystems
    umount "$ROOTFS/dev/pts"
    umount "$ROOTFS/proc"
    umount "$ROOTFS/sys"	
}

create_container()
{
	info "\n= Creating a CentOS-Based LXC container =\n"
	# create cache and install centos
	install_centos
    if [ $? -ne 0 ]; then
       error "Failed to install a 'CentOS Base' container"
       exit 1
    fi	
	# configure chroot
	configure_centos
    if [ $? -ne 0 ]; then
       error "Failed to configure centos container"
       exit 1
    fi
	# cleanup centos
	centos_cleanup
	info "\nCentOS LXC Container created\n"
	return 0
}

