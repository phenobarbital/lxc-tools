#!/bin/bash -e
##
#  /usr/lib/lxc-tools/templates.d/lxc-ubuntu
#
#  Build a Ubuntu container from Ubuntu and Debian rules
##
#
# debootstrap Ubuntu installer
# Version: 0.5
#
# based on:
# Copyright © 2011 Serge Hallyn <serge.hallyn@canonical.com>
# Copyright © 2010 Wilhelm Meier
# Authors: 
# Wilhelm Meier <wilhelm.meier@fh-kl.de>
# Jesus Lara <jesuslara@phenobarbital.info>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

download_ubuntu() 
{
	if [ "$ARCH" = 'x86_64' ]; then
		arch='amd64'
	else
		arch='i686'
	fi
	cachedir="$CACHE/$DIST/$SUITE"
	
    mkdir -p "$cachedir/partial-$arch"
    if [ $? -ne 0 ]; then
       	error "Failed to create '$cachedir/partial-$arch' directory"
       	return 1
    fi
    
    # extra packages for Ubuntu minimal
    extra_packages=dialog,apt,apt-utils,iproute,inetutils-ping,vim,isc-dhcp-client,isc-dhcp-common,ssh,lsb-release,gnupg,netbase,ubuntu-keyring
    
    message "Downloading Ubuntu minimal ..."
    debootstrap --verbose --components=main,universe --arch=$arch --include $extra_packages \
        $SUITE $cachedir/partial-$arch $MIRROR
    RESULT=$?

    if [ "$RESULT" != "0" ]; then
       error "Failed to download the rootfs, aborting."
       rm -fR "$cachedir/partial-$arch"
       return 1
    fi
    mv "$cachedir/partial-$arch" "$cachedir/rootfs-$arch"
    info "Download $DIST $SUITE complete."
    return 0
}

copy_ubuntu()
{
	# make a local copy of the ubuntu cache
	if [ "$ARCH" = 'x86_64' ]; then
		arch='amd64'
	else
		arch='i686'
	fi	
	cachedir="$CACHE/$DIST/$SUITE"
    info "Copying cache rootfs to $ROOTFS..."
    rsync -aqzpHSW $cachedir/rootfs-$arch/* $ROOTFS/ || return 1
    if [ $? -ne 0 ]; then
		error "Failed to copy rootfs"
        exit 1
    fi
}

install_ubuntu() 
{

    mkdir -p /var/lock/subsys/
    (
        flock -n -x 200
        if [ $? -ne 0 ]; then
            error "Cache repository is busy."
            exit 1
        fi
        
        # TODO: add multi-arch support
		if [ "$ARCH" = 'x86_64' ]; then
			arch='amd64'
		else
			arch='i686'
		fi	        
		cachedir="$CACHE/$DIST/$SUITE"
		
        # cleaning cache of mini ubuntu
        if [ "$CLEAN_CACHE" -eq "1" ]; then
			message "Cache found in $cachedir/rootfs-$arch. clearing ..."
			rm -fR $cachedir/rootfs-$arch
        fi
        
        # check the mini ubuntu was not already downloaded
        message "Checking cache download in $cachedir/rootfs-$arch ... "
        if [ ! -e "$cachedir/rootfs-$arch" ]; then
            download_ubuntu
            if [ $? -ne 0 ]; then
                error "Failed to download Ubuntu Suite"
                exit 1
            fi
        fi
        
        copy_ubuntu
        
        return 0

        ) 200>/var/lock/subsys/lxc-ubuntu

    return $?
}

ubuntu_cleanup()
{
	#
	# clean apt cache
	#
	chroot $ROOTFS /usr/bin/apt-get -y autoremove
	chroot $ROOTFS /usr/bin/apt-get -y clean
	#  Remove disable-daemons script (if present)
	if [ -x "$ROOTFS/usr/sbin/policy-rc.d" ]; then
		rm -f "$ROOTFS/usr/sbin/policy-rc.d"
	fi
	# Unmount systems apt cache
    umount "$ROOTFS/var/cache/apt/archives"
    rm -f "$ROOTFS/etc/dpkg/dpkg.cfg.d/lxc"
    # Unmount pseudo-filesystems
    umount "$ROOTFS/dev/pts"
    umount "$ROOTFS/proc"
    umount "$ROOTFS/sys"
}

ubuntu_network()
{
	if [ "$DHCP" = "y" ]; then
cat <<EOF >> $ROOTFS/etc/network/interfaces
# interface $LAN_INTERFACE
auto $LAN_INTERFACE
iface $LAN_INTERFACE inet dhcp
EOF
cat <<EOF >> $ROOTFS/etc/hosts
# $HOSTNAME
127.0.1.1 $HOSTNAME $NAME
EOF
	else
cat <<EOF >> $ROOTFS/etc/network/interfaces
# interface $LAN_INTERFACE
auto $LAN_INTERFACE
iface $LAN_INTERFACE inet static
	address $IP
	netmask $NETMASK
	network $NETWORK
	gateway $GATEWAY
EOF
cat <<EOF >> $ROOTFS/etc/hosts
# $HOSTNAME
$IP	$HOSTNAME $NAME
EOF
	fi
# set the hostname
echo $NAME > $ROOTFS/etc/hostname
echo $HOSTNAME > $ROOTFS/etc/mailname
# so you can 'ssh $hostname.' or 'ssh $hostname.local'
if [ -f $ROOTFS/etc/dhcp/dhclient.conf ]; then
    sed -i "s/<hostname>/$HOSTNAME/" $ROOTFS/etc/dhcp/dhclient.conf
elif [ -f $ROOTFS/etc/dhcp3/dhclient.conf ]; then
    sed -i "s/<hostname>/$HOSTNAME/" $ROOTFS/etc/dhcp3/dhclient.conf
fi
}

ubuntu_devices()
{
	DEV="$ROOTFS/dev"
	if [ ! -d "$DEV" ]; then
		mkdir -p $DEV
	fi
	rm -f $DEV/tty
	mknod -m 666 $DEV/tty c 5 0
    for tty in $(seq 0 4); do
	if [ ! -e $DEV/tty$tty ]; then
	    mknod -m 666 $DEV/tty$tty c 4 $tty
	fi
	done
    rm -f $DEV/null
	mknod -m 666 $DEV/null c 1 3
	rm -f $DEV/zero
    mknod -m 666 $DEV/zero c 1 5
    rm -f $DEV/random
    mknod -m 666 $DEV/random c 1 8
    rm -f $DEV/urandom
    mknod -m 666 $DEV/urandom c 1 9
    rm -f $DEV/console
    mknod -m 600 $DEV/console c 5 1
    rm -f $DEV/full
    mknod -m 666 $DEV/full c 1 7
    rm -fR $DEV/shm
    mkdir -m 1777 $DEV/shm
    rm -fR $DEV/pts
    mkdir -m 755 $DEV/pts
    # Mount pseudo-filesystems
    mount -o bind /dev/pts "$ROOTFS/dev/pts"
    mount -o bind /proc "$ROOTFS/proc"
    mount -o bind /sys "$ROOTFS/sys"
	# Bind mount systems apt cache
    mount -o bind /var/cache/apt/archives "$ROOTFS/var/cache/apt/archives"
    # suppress log level output for udev
    sed -i "s/=\"err\"/=0/" $ROOTFS/etc/udev/udev.conf
    # remove jobs for consoles 5 and 6 since we only create 4 consoles in
    # this template
    rm -f $ROOTFS/etc/init/tty{5,6}.conf
    # provide the lxc service
    cat <<EOF > $ROOTFS/etc/init/lxc.conf
# fake some events needed for correct startup other services
description     "Container Upstart"
start on startup
script
        rm -rf /var/run/*.pid
        rm -rf /var/run/network/*
        /sbin/initctl emit stopped JOB=udevtrigger --no-wait
        /sbin/initctl emit started JOB=udev --no-wait
end script
EOF

    return 0
}

ubuntu_inittab() {
	# create a minimal inittab
cat <<EOF > $ROOTFS/etc/inittab
# /etc/inittab: init(8) configuration.
# The default runlevel.
id:3:initdefault:
# This is run first except when booting in emergency (-b) mode.
si::sysinit:/etc/init.d/rcS
# What to do in single-user mode.
#~~:S:wait:/sbin/sulogin
# /etc/init.d executes the S and K scripts upon change
# of runlevel.
# Runlevel 0 is halt.
# Runlevel 1 is single-user.
# Runlevels 2-5 are multi-user.
# Runlevel 6 is reboot.
l0:0:wait:/etc/init.d/rc 0
l1:1:wait:/etc/init.d/rc 1
l2:2:wait:/etc/init.d/rc 2
l3:3:wait:/etc/init.d/rc 3
l4:4:wait:/etc/init.d/rc 4
l5:5:wait:/etc/init.d/rc 5
l6:6:wait:/etc/init.d/rc 6
p6::ctrlaltdel:/sbin/init 6
p0::powerfail:/sbin/init 0
pf:12345:powerwait:/sbin/halt
z6:6:respawn:/sbin/sulogin
# /sbin/getty invocations for the runlevels.
1:2345:respawn:/sbin/getty 38400 console
EOF
# configure a minimal fstab for container
cat <<EOF > $ROOTFS/etc/fstab
/dev/root             /       rootfs defaults        0 0
proc            /proc         proc   nodev,noexec,nosuid 0 0
sysfs           /sys          sysfs  defaults  0 0
EOF
}

configure_ubuntu()
{
	# configure inittab
	ubuntu_inittab
	# configure via mknod devices
	ubuntu_devices
	# configure Ubuntu network
	ubuntu_network
    if [ $? -ne 0 ]; then
		error "Failed to Configure 'Ubuntu Minimal'"
		return 1
    fi	
	# running basic Ubuntu hooks
	hooks="$TEMPLATEDIR/ubuntu.d"
	for f in $(find $hooks/* -maxdepth 1 -executable -type f ! -iname "*.md" ! -iname ".*" | sort --numeric-sort); do
		. $f
	done
}

create_container()
{
	info "= Creating a Ubuntu-Based LXC container ="
	# create cache and install Ubuntu
	install_ubuntu
    if [ $? -ne 0 ]; then
		error "Failed to Download and install Ubuntu Minimal"
		return 1
    fi
	debug "= Configure Ubuntu-Based LXC container ="
	# configure chroot
	configure_ubuntu
    if [ $? -ne 0 ]; then
		error "Failed to Configure Ubuntu Minimal"
		return 1
    fi
    cleanup_container
	info "Ubuntu $SUITE LXC Container created"
	return 0
}

cleanup_container()
{
	# cleanup ubuntu
	ubuntu_cleanup
	return 0
}
