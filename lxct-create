#!/bin/bash
# ================================================================================
# LXC-tools: Appliance and LXC container builder for Debian GNU/Linux (and derivatives)
#
# Copyright © 2010 Jesús Lara Giménez (phenobarbital) <jesuslara@devel.com.ve>>
# Version: 0.2    
#
#    Developed by Jesus Lara (phenobarbital) <jesuslara@phenobarbital.info>
#    https://github.com/phenobarbital/mandarinalinux
#    
#    This script is based on the lxc-debian example script that ships with lxc.
#    Copyright (C) 2010 Nigel McNie
#
#    License: GNU GPL version 3  <http://gnu.org/licenses/gpl.html>.
#    This is free software: you are free to change and redistribute it.
#    There is NO WARRANTY, to the extent permitted by law.
# ================================================================================

###
# lxct_create
# create a lxc container
##

# set -e

# get configuration
if [ -e /etc/lxc-tools/lxc-tools.conf ]; then
    . /etc/lxc-tools/lxc-tools.conf
else
    . ./share/lxc-tools.conf
fi

#
#  fill all "auto" variables
#
if [ -e /usr/lib/lxc-tools/build.sh ]; then
    . /usr/lib/lxc-tools/build.sh
else
    . ./lib/build.sh
fi

####================= Main execution ==========================####

NAME=''
SIZE=''
IP=''
IFACE=''
NET_OPTIONS=''
VLAN_ID='1234'
DIST=''
TEMPLATE=''
ROLE=''
HOSTNAME=''
CLEAN_CACHE=0

usage() {
	echo "Usage: $(basename $0) [-n|--name=<container_name>]
        [-t|--template=<template-name>] [-c|--clean] [-r|--role=<role-name>] [-A|--arch=<arch of the container>]
        [-B|--backend=<dir|LVM|btrfs>] [--dhcp|--ip=<ip>] [-h|--help]"  
    exit 1
}

help() {
	usage
cat <<EOF

This script is a helper to create lxc system containers

The script will create the container configuration file following
the informations submitted interactively with 'lxct-create'

Options:
  -n, --name                 specify the name of the lxc container
  -t, --template             create container from a template script (debian, ubuntu, canaima, etc)
  -r, --role                 role-based script for running in container after creation
  -c, --clean                create a clean version of cache container
  -B, --backend				 define backend for container storage (default: dir, LVM or btrfs) 
  -s, --size                 if LVM or btrfs, volume size
  -f, --fs					 if LVM, set filesystem format (ext4, xfs, btrfs)
  -l, --lvm                  set the LVM volume group name for container creation
  -n, --net					 specify network option (veth, macvlan, vlan, empty)
  -i, --iface                if macvlan or vlan option, define interface name (ex: eth0)
  -v, --vlan                 if vlan is enabled, define vlan-id
  -D, --debug                Enable debugging information
  --dhcp					 container interface is in dhcp mode
  --ip						 IP Address of container
  Help options:
      --help     give this help list
      --usage	 Display brief usage message
      --version  print program version
EOF
	exit 1
}

# get template
function get_template() 
{
	templatedir
	if [ -z "$TEMPLATE" ]; then
		DIST=`get_distribution`
		case "$DIST" in
			"debian"|"Debian"|"DEBIAN")
				message "using lxc-debian as template"
				TEMPLATE="$TEMPLATEDIR/lxc-debian"
				;;
			*)
				error "Unknown distribution: $DIST"
				exit 1
				;;    	
		esac
	elif [ -f "$TEMPLATEDIR/lxc-$TEMPLATE"]; then
		TEMPLATE="$TEMPLATEDIR/lxc-$TEMPLATE"
	else
		error "$(basename $0) template $TEMPLATE not exists, aborted"
		exit 1
	fi
}

function get_role()
{
	roledir
	if [ ! -z "$ROLENAME" ]; then
		#verifico que el rol existe
		if [ -f "$ROLEDIR/$ROLENAME" ]; then
			# verifico ademas la permisologia
			if [ ! -x "$ROLEDIR/$ROLENAME" ]; then
				error "$(basename $0) role $ROLENAME is not executable, try chmod o+x $ROLEDIR/ROLENAME"
			else
				ROLE="$ROLEDIR/$ROLENAME"
				return 0
			fi
		else
			error "$(basename $0) role $ROLENAME not exists in $ROLEDIR"
			return 1
		fi
	fi
}

# get hostname
function get_name() {
        if [ -z "$NAME" ]; then
                echo -n "name of container? [`hostname --short`] "
                read _HOSTNAME_
                if [ ! -z "$_HOSTNAME_" ]; then
                    NAME=$_HOSTNAME_
                elif [ -z "$NAME" ]; then
                    error "$(basename $0) error : missing container name, use -n option"
                    exit 1
                fi
        fi
        HOSTNAME=$NAME.$DOMAIN
}

function get_size() {
	if [ -z "$SIZE" ]; then
		SIZE=$DEFAULT_SIZE
	fi
}

# get network information
function get_network_info() {
	#TODO define vlan, nat or bridge network
	if [ "$DHCP" = 'n' ]; then
		#use static ip
		if [ -z "$IP" ]; then
			echo -n "IP Address for container [ex: 192.168.1.x]: "
			read _IP_
			if [ ! -z "$_IP_" ]; then
				IP=$_IP_
			else
				error "$(basename $0) error: missing IP Address"
				exit 1
			fi
		fi
        # TODO: validate IP address
        
        # use fixed IP
        NET="$IP/$SUBNET"
    else
		# use DHCP
		NET="0.0.0.0/$SUBNET"
	fi
    # get mac-address
	if [ -f /usr/lib/lxc-tools/macgen.py ]; then
		MACADDR=`python /usr/lib/lxc-tools/macgen.py`
	else
		MACADDR=`python ./lib/macgen.py`
	fi
	# get network type
	case "$NET_TYPE" in
	'veth')
NET_OPTIONS=$(cat <<EOF
lxc.network.link                        = $BRIDGE
lxc.network.hwaddr                      = $MACADDR
lxc.network.ipv4                        = $NET
EOF
)
;;
	'macvlan')
NET_OPTIONS=$(cat <<EOF
lxc.network.link                        = $IFACE
lxc.network.hwaddr                      = $MACADDR
lxc.network.ipv4                        = $NET
EOF
)
;;
	'vlan')
NET_OPTIONS=$(cat <<EOF
lxc.network.link                        = $IFACE
lxc.network.vlan.id                     = $VLAN_ID
lxc.network.hwaddr                      = $MACADDR
lxc.network.ipv4                        = $NET
EOF
)
;;
	'empty')
		NET_OPTIONS='';;
	'*')
		error "$(basename $0) invalid network configuration"
		exit 1;;
	esac
}

# get volume and create lvm volume
function create_lvm_volume() {
	if [ "$FS_METHOD" = 'btrfs' ]; then
		get_size
cat <<EOF
  Volume Group: $LVM
  LVM Name : $NAME
  Size : $SIZE
EOF
		LVCREATE=`which lvcreate`
		if [ ! -f "$LVCREATE" ]; then
			error "'lvcreate' command is missing, run 'apt-get install lvm2'"
			exit 1
		fi
		LVROOTFS="/dev/$LVM/$NAME"
		lvdisplay $LVROOTFS > /dev/null 2>&1
		if [ $? -eq 0 ]; then
			error "$(basename $0) error: $LVROOTFS already exists in vggroup $LVM" >&2
			exit 1
		fi
		$LVCREATE -n $NAME --size $SIZE $LVM
		if [ $? -eq 0 ]; then
			error "$(basename $0) error creating $LVROOTFS in vggroup $LVM, aborted" >&2
			exit 1
		fi
		# volume format
		if [ -f "$LVROOTFS" ]; then
			/sbin/mkfs.$FS -L $NAME $LVROOTFS
		else
			error "$(basename $0) error: $LVROOTFS not created"
			exit 1
		fi
		# mount
		mount -t $FS $LVROOTFS $ROOTFS
  fi
}

function create_btrfs_volume() {
	#TODO
	if [ "$FS_METHOD" = 'btrfs' ]; then
		get_size
		message "formatting via btrfs"
	fi
}

# crear la carpeta para el rootfs
function make_rootfs() {
	# create directory
    if [ ! -f "$ROOTFS" ]; then
		mkdir -p $ROOTFS
		message "- created rootfs folder $ROOTFS -"
    fi
}

function touch_config() {
	if [ -d "$CONFIG" ]; then
		message "- created config file in $CONFIG -"
		touch $CONFIGFILE
	fi
}

function create_lxc_config() {
	ARCHITECTURE=`uname -m`
cat <<EOF > $CONFIGFILE
# $CONFIGFILE

## Container
lxc.utsname                             = $NAME
lxc.rootfs                              = $ROOTFS
lxc.arch                                = $ARCHITECTURE
lxc.console                             = /var/log/lxc/$NAME.console
lxc.tty                                 = 4
lxc.pts                                 = 1024

## network
lxc.network.type                        = $NET_TYPE
lxc.network.flags                       = up
$NET_OPTIONS

## Capabilities
lxc.cap.drop                            = mac_admin
lxc.cap.drop                            = mac_override
lxc.cap.drop                            = sys_admin
lxc.cap.drop                            = sys_module

## Devices
# Allow all devices
#lxc.cgroup.devices.allow               = a
# Deny all devices
lxc.cgroup.devices.deny                 = a
# Allow to mknod all devices (but not using them)
lxc.cgroup.devices.allow                = c *:* m
lxc.cgroup.devices.allow                = b *:* m
# /dev/console
lxc.cgroup.devices.allow                = c 5:1 rwm
# /dev/fuse
lxc.cgroup.devices.allow                = c 10:229 rwm
# /dev/null
lxc.cgroup.devices.allow                = c 1:3 rwm
# /dev/ptmx
lxc.cgroup.devices.allow                = c 5:2 rwm
# /dev/pts/*
lxc.cgroup.devices.allow                = c 136:* rwm
# /dev/random
lxc.cgroup.devices.allow                = c 1:8 rwm
# /dev/rtc
lxc.cgroup.devices.allow                = c 254:0 rwm
# /dev/tty
lxc.cgroup.devices.allow                = c 5:0 rwm
# /dev/urandom
lxc.cgroup.devices.allow                = c 1:9 rwm
# /dev/zero
lxc.cgroup.devices.allow                = c 1:5 rwm

## Limits
lxc.cgroup.cpu.shares                  = 1024
lxc.cgroup.cpuset.cpus                 = 1
lxc.cgroup.memory.limit_in_bytes       = $MEMORY

## Filesystem
lxc.mount.entry                         = proc $ROOTFS/proc proc nodev,noexec,nosuid 0 0
lxc.mount.entry                         = sysfs $ROOTFS/sys sysfs defaults,ro 0 0
lxc.mount.entry                         = devpts $ROOTFS/dev/pts devpts defaults 0 0
EOF
    if [ $? -ne 0 ]; then
        error "$(basename $0) Failed to add configuration"
        return 1
    fi

    return 0
}	


### primary functions
function create() {
	get_name
	CONFIG="$DIR/$NAME"
    ROOTFS="$CONFIG/rootfs"
    CONFIGFILE="$CONFIG/config"
    if [ -z "$BACKEND_METHOD" ]; then
		# if not backend_method defined, dir is by default
		BACKEND_METHOD='dir'
	fi
	# check filesystem
    grep -q "\<$FS\>" /proc/filesystems
    if [ $? -ne 0 ]; then
        error "$(basename $0) error: $FS is not listed in /proc/filesystems" >&2
        exit 1
    fi
    make_rootfs
	case "$BACKEND_METHOD" in
	"btrfs")
		#TODO: no options yet
		create_btrfs_volume
		touch_config
		echo "btrfs" && exit 0;;
	"dir")
		# create config-file
		touch_config
		;;
	"lvm")
		# mount LVM volume
		create_lvm_volume
		touch_config
		;;
	"*")
		# invalid option
		error "$(basename $0) : invalid method $BACKEND_METHOD" >&2
		exit 1;;
	esac
	# network configuration
	get_network_info
	# create config file
    create_lxc_config
    ## creating vm from template
    get_template
    message "creating container from template $TEMPLATE"
    . $TEMPLATE
    create_container
    if [ "$?" -ne "0" ]; then
    	error "failed to create Container, aborted"
    	exit 1
    fi
    #
    # add this container to lxc
	if [ -f "$CONFIGFILE" ] ; then
  	#	#si existe el archivo, entonces
  		lxc-create -n $NAME -f $CONFIGFILE
	fi
	# running any role defined into chroot
	get_role
    if [ "$?" -ne "0" ]; then
    	error "failed to get role $ROLE information"
    else
		if [ ! -z "$ROLE" ]; then
			info "\n = Executing role $ROLE = \n"
			. $ROLE $ROOTFS
		fi
    fi
    message "Done."
    info "\nYou can run your container with the 'lxc-start -n $NAME -d'\n"    
}

### main execution program ###

if [ "$(id -u)" != "0" ]; then
   error "$(basename $0): must be run as root" >&2
   exit 1
fi

# si no pasamos ningun parametro
if [ $# = 0 ]; then
    usage
    exit 1
fi

check_backend()
{
	if [ "$1" != "dir" ] || [ "$1" != "lvm" ] || [ "$1" != "btrfs" ]; then
		usage_err "option '$1' invalid backend"
	fi
}

check_net()
{
	if [ "$1" != "veth" ] || [ "$1" != "macvlan" ] || [ "$1" != "vlan" ] || [ "$1" != "empty" ]; then
		usage_err "option '$1' invalid network option"
	fi
}

while [ $# -gt 0 ]; do
    opt="$1"
    shift
    case "$opt" in
        -n|--name)
            optarg_check $opt "$1"
            NAME=$1
            shift
            ;;
        -r|--role)
            optarg_check $opt "$1"
            ROLENAME=$1
            shift
            ;;
        -t|--template)
            optarg_check $opt "$1"
            TEMPLATE=$1
            shift
            ;;
        -c|--clean)
            CLEAN_CACHE=1
            shift
            ;;            
        -B|--backend)
            check_backend "$1"
            BACKEND_METHOD=$1
            shift
            ;;
        -d|--dir)
            optarg_check $opt "$1"
            DIR=$1
            shift
            ;;         
        -l|--lvm)
            optarg_check $opt "$1"
            LVM=$1
            shift
            ;;
        -n|--net)
			check_net "$1"
			NET_TYPE=$1
			shift
			;;
        -i|--iface)
            optarg_check $opt "$1"
            IFACE=$1
            shift
            ;;            
        -v|--vlan)
            optarg_check $opt "$1"
            VLAN_ID=$1
            shift
            ;;
        -f|--fs)
            optarg_check $opt "$1"
            FS=$1
            shift
            ;;
        -s|--size)
            optarg_check $opt "$1"
            SIZE=$1
            shift
            ;;
        --dhcp)
            DHCP='y'
            shift
            ;;
        --ip)
			optarg_check $opt "$1"
			DHCP='n'
			IP=$1
			shift
			;;
        --dist)
			optarg_check $opt "$1"
            DIST=$1
            shift
            ;;
        --suite)
			optarg_check $opt "$1"
            SUITE=$1
            shift
            ;;              
        -D|--debug)
            VERBOSE='true'
            shift
            ;;
        --version)
			get_version
			exit 0;;
        -h|--help)
            help
            exit 1
            ;;
        --)
            break;;
        -?)
            usage_err "unknown option '$opt'"
            ;;
        -*)
            # split opts -abc into -a -b -c
            set -- $(echo "${opt#-}" | sed 's/\(.\)/ -\1/g') "$@"
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done

# main function
create

exit 0
