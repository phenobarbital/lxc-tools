* create a lxc-container from a openvz template:

http://download.openvz.org/template/precreated/centos-6-x86_64.tar.gz
http://download.openvz.org/template/precreated/fedora-18-x86_64.tar.gz
http://download.openvz.org/template/precreated/ubuntu-13.04-x86_64.tar.gz

* crear un LXC a partir de una openvz template
* crear un LXC-container a partir de una vps openvz (backup)
* crear un LXC-application-container
* crear un lxc-container a partir de un debootstrap (ubuntu, canaima)
* crear un contenedor Fedora, CentOS
* Crear rol para un application-container (ej: bind-chroot)

- descubrir en /etc/default/lxc

LXC_AUTO="true"
LXC_DIRECTORY="/var/lib/lxc"

/etc/lxc/lxc.conf
contiene:
lxcpath=/var/lib/lxc

- crear cada comando:

lxc:
- create
- update
- delete
- import (from vps openvz)
- export (to gz file)

lxct 

- create a console-like command (lxct) como lxctl pero en Python


### main execution program

COMMAND=$1

shift
case "$COMMAND" in
    help)      echo "help"; usage && exit 0;;
    bridge)
		get_bridge;;
    ip)
    	# ip info
    	IFACE=$1; get_ip;;
    netmask)
    	# ip info
    	IFACE=$1; get_netmask;;
    network)
    	# ip info
    	IFACE=$1; get_network;;
    broadcast)
    	# ip info
    	IFACE=$1; get_broadcast;;
    subnet)
    	# ip info
    	IFACE=$1; get_subnet;;
    *)
    	usage
        exit 1
        ;;
esac

exit 0

Como en lxc normal, agregar una shared data

        if [ -z "${_ENTRY}" ]
        then
                # Adding shared data directory if existing
                if [ -d "/srv/share/${_NAME}" ]
                then
                        echo "lxc.mount.entry                         = /srv/share/${_NAME} ${_ROOTFS}/srv/${_NAME} none defaults,bind 0 0" >> "${_PATH}/config"
                        mkdir -p "${_ROOTFS}/srv/${_NAME}"
                elif [ -d "/srv/${_NAME}" ]
                then
                        echo "lxc.mount.entry                         = /srv/${_NAME} ${_ROOTFS}/srv/${_NAME} none defaults,bind 0 0" >> "${_PATH}/config"
                        mkdir -p "${_ROOTFS}/srv/${_NAME}"
                elif [ -d "/srv/share" ]
                then
                        echo "#lxc.mount.entry                        = /srv/share/${_NAME} ${_ROOTFS}/srv/${_NAME} none defaults,bind 0 0" >> "${_PATH}/config"
                else
                        echo "#lxc.mount.entry                        = /srv/${_NAME} ${_ROOTFS}/srv/${_NAME} none defaults,bind 0 0" >> "${_PATH}/config"
                fi
        fi

== LXC application Containers ==

* running "sleep" for 100 seconds in a container named "guest"

lxc-execute -n guest -- sleep 100

* configuration for application containers:

lxc.utsname = guest
lxc.tty = 1
lxc.pts = 1
lxc.rootfs = /tmp/guest/rootfs
lxc.mount.entry=/lib /tmp/guest/rootfs/lib none ro,bind 0 0
lxc.mount.entry=/usr/libexec /tmp/guest/rootfs/usr/lib none ro,bind 0 0
lxc.mount.entry=/lib64 /tmp/guest/rootfs/lib64 none ro,bind 0 0
lxc.mount.entry=/usr/lib64 /tmp/guest/rootfs/usr/lib64 none ro,bind 0 0
lxc.mount.entry=/bin /tmp/guest/rootfs/bin none ro,bind 0 0
lxc.mount.entry=/usr/bin /tmp/guest/rootfs/usr/bin none ro,bind 0 0
lxc.cgroup.cpuset.cpus=1

The mount entry for /usr/libexec is required so that the container can access /usr/libexec/lxc/lxc-init on the host system.

You must also configure the required directories under the rootfs directory:

[root@host ~]# TMPDIR=/tmp/guest/rootfs
[root@host ~]# mkdir -p $TMPDIR/lib $TMPDIR/usr/lib $TMPDIR/lib64 $TMPDIR/usr/lib64 \
$TMPDIR/bin $TMPDIR/usr/bin $TMPDIR/dev/pts $TMPDIR/dev/shm $TMPDIR/proc
In this example, the directories include /dev/pts, /dev/shm, and /proc in addition to the mount point entries defined in the configuration file.

